// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USER
}

model Transaction {
  id              String   @id @default(uuid())
  amount          Float
  description     String   @default("")
  userId          String
  user            User     @relation(fields: [userId], references: [id])
  transactionDate DateTime @default(now()) // Fecha real de la transacci√≥n

  createdAt DateTime @default(now()) // Fecha donde es creado en la base de datos
  updatedAt DateTime @updatedAt
}

// https://authjs.dev/getting-started/adapters/prisma

model User {
  id            String    @id @default(cuid())
  name          String?
  nickname      String?
  email         String    @unique
  emailVerified DateTime?
  picture         String?
  image         String?

  accounts      Account[]
  sessions      Session[]

  password String?

  telephone    String?       @unique
  role         Role          @default(USER)
  transactions Transaction[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}
